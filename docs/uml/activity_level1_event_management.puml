@startuml activity_level1_event_management
!theme plain
title Campus Connect - Level 1: Event Management Process (Activity Diagram)

|Student/Faculty Actor|
start
:User accesses
Event module;

|Event Management System|
:Retrieve user role
from session;
note right: Input: User credentials

:Load events
from database;
note right: Input: Query filters (date, category)

|Database|
:Query events table
with RLS policies;
:Return event list;
note left: Output: Event records

|Event Management System|
:Format and filter
event data;

|Student/Faculty Actor|
:Display event
listings;

:User selects
event action;
note right: Input: User interaction

if (User role?) then (Student)
  |Event Management System|
  :Present event
  details view;
  
  |Student/Faculty Actor|
  if (RSVP to event?) then (yes)
    |Event Management System|
    :Record RSVP;
    note right: Input: Event ID, User ID
    
    |Database|
    :INSERT into
    event_rsvp table;
    :Return confirmation;
    note left: Output: RSVP record
    
    |Event Management System|
    :Update local state;
    
    |Student/Faculty Actor|
    :Show RSVP
    confirmation;
  endif
  
  :View event
  location on map;
  note right: Input: Location coordinates
  
  |External: Google Maps|
  :Display event
  location marker;
  note left: Output: Map view with marker
  
else (Faculty)
  |Event Management System|
  if (Create new event?) then (yes)
    |Student/Faculty Actor|
    :Provide event
    details;
    note right
      Input: Event data
      - Title
      - Description
      - Location
      - Date/Time
      - Category
    end note
    
    |Event Management System|
    :Validate event
    data;
    
    if (Validation passed?) then (yes)
      :Format data
      for storage;
      note right: Input: Validated event data
      
      |Database|
      :Check faculty
      role via RLS;
      
      if (RLS policy allows?) then (yes)
        :INSERT into
        events table;
        :Return new
        event record;
        note left: Output: Event with ID
        
        |Event Management System|
        :Trigger notification
        workflow;
        note right: Input: New event ID
        
        |Notification System|
        :Create notification
        records for students;
        :Send FCM push
        notifications;
        note left: Output: Notification delivery status
        
        |Event Management System|
        :Update event list;
        
        |Student/Faculty Actor|
        :Show success
        message;
      else (no - RLS denied)
        |Event Management System|
        :Return authorization
        error;
        
        |Student/Faculty Actor|
        :Show error
        "Unauthorized";
      endif
    else (no)
      |Event Management System|
      :Return validation
      errors;
      
      |Student/Faculty Actor|
      :Display validation
      errors;
    endif
    
  else if (Edit existing event?) then (yes)
    |Student/Faculty Actor|
    :Modify event
    details;
    note right: Input: Updated event data
    
    |Event Management System|
    :Validate ownership
    and permissions;
    
    |Database|
    :Check created_by
    matches user_id;
    
    if (Owner & Faculty?) then (yes)
      :UPDATE events
      table;
      :Return updated
      record;
      note left: Output: Updated event
      
      |Event Management System|
      :Refresh event list;
      
      |Student/Faculty Actor|
      :Show update
      confirmation;
    else (no)
      |Event Management System|
      :Return error;
      
      |Student/Faculty Actor|
      :Show error
      "Cannot edit";
    endif
    
  else (Delete event)
    |Student/Faculty Actor|
    :Confirm deletion;
    
    |Event Management System|
    :Validate ownership;
    
    |Database|
    :Check created_by
    and RLS policy;
    
    if (Authorized?) then (yes)
      :DELETE from
      events table;
      :Cascade delete
      notifications;
      :Return confirmation;
      note left: Output: Deletion status
      
      |Event Management System|
      :Remove from
      event list;
      
      |Student/Faculty Actor|
      :Show deletion
      success;
    else (no)
      |Event Management System|
      :Return error;
      
      |Student/Faculty Actor|
      :Show error;
    endif
  endif
endif

stop

floating note right
  **Level 1 Processes:**
  
  1. Retrieve Events (P1.1)
  2. Display Events (P1.2)
  3. RSVP to Event (P1.3) - Students only
  4. Create Event (P1.4) - Faculty only
  5. Edit Event (P1.5) - Faculty only
  6. Delete Event (P1.6) - Faculty only
  7. Trigger Notifications (P1.7)
  
  **Data Flows:**
  - Event Data (from DB)
  - Event Filters (from user)
  - RSVP Records (to DB)
  - Notification Triggers (to Notification System)
end note

floating note left
  **Data Stores:**
  
  D1: events table
  D2: event_rsvp table
  D3: notifications table
  D4: users table (for role check)
  
  **RLS Policies:**
  - All users: SELECT on events
  - Faculty only: INSERT, UPDATE, DELETE
  - Ownership check for UPDATE/DELETE
end note

floating note bottom
  **External Process:**
  
  Maps API integration for
  displaying event locations
  and enabling navigation
end note

@enduml
